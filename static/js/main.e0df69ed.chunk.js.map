{"version":3,"sources":["components/Card.js","components/Cardlist.js","components/Searchbox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","action.js","constant.js","serviceWorker.js","reducer.js","index.js"],"names":["Card","id","name","email","className","alt","src","Cardlist","robots","map","user","i","key","Searchbox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","onRequestRobots","searchField","onSearchChange","isPending","filteredfriends","filter","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.e0df69ed.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({id, name, email}) =>{\r\n\treturn (\r\n\t\t<div className='bg-light-green dib br3 pa3 ma2 grow nw2 shadow-5'>\r\n\t\t\t<img alt = 'Friends' src={ `https://robohash.org/${id}?200x200`} />\r\n\t\t\t<div>\r\n\t\t\t\t<h2>{name}</h2>\r\n\t\t\t\t<p>{email}</p>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t\t); \r\n} \r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst Cardlist = ({ robots }) => { \r\n\treturn (\r\n\t\t<div>\r\n\t\t{\t\r\n\t\trobots.map((user, i) => {\r\n\t\treturn (\r\n\t\t<Card \r\n\t\tkey={i} \r\n\t\tid={robots[i].id}\r\n\t\tname={robots[i].name}\r\n\t\temail={robots[i].email}\r\n\t\t/>\r\n\t\t);\r\n\t})\r\n\t}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default Cardlist;","import React from 'react'\r\n\r\nconst Searchbox = ({searchfield, searchChange}) => {\r\n\treturn (\r\n\t\t<div className='pa2'>\r\n\t\t\t<input\r\n\t\t\tclassName='pa3 ba b--green bg-lightest-blue'\r\n\t\t\ttype='search'\r\n\t\t\tplaceholder='search friends'\r\n\t\t\tonChange = {searchChange}\r\n\t\t\t/>\r\n\t\t</div>\r\n\t\t);\r\n}\r\n\r\nexport default Searchbox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n\treturn (\r\n\t\t<div style = {{overflowY: 'scroll', border: '4px solid black', height: '500px' }}>\r\n\t\t\t{props.children}\r\n\t\t</div>\r\n\t\t);\r\n};\r\n\r\nexport default Scroll;","import React, { Component }from 'react';\r\n\r\nclass ErrorBoundry extends Component {\r\n\tconstructor(props) {\r\n\t\tsuper(props);\r\n\t\tthis.state = {\r\n\t\t\thasError: false\r\n\t\t}\r\n\t}\r\n\r\ncomponentDidCatch(error,info) {\r\n\tthis.setState({hasError: true})\r\n}\r\n\r\n\trender() {\r\n\t\tif (this.state.hasError) {\r\n\t\t\treturn <h1> whoops not good </h1>\r\n\t\t}\r\n\t\treturn this.props.children\r\n\t}\r\n}\r\n\r\nexport default ErrorBoundry;","import React, { Component } from 'react';\r\nimport Cardlist from '../components/Cardlist';\r\nimport { connect } from 'react-redux';\r\nimport Searchbox from '../components/Searchbox';\r\nimport Scroll from '../components/Scroll';\r\nimport './App.css';\r\nimport ErrorBoundry from '../components/ErrorBoundry';\r\nimport { setSearchField, requestRobots } from '../action';\r\n\r\n\r\n// const state = {\r\n//   robots: robots,\r\n//   searchfield: ''\r\n// }\r\n\r\nconst mapStatetoProps = state => {\r\n  return {\r\n    searchField: state.searchRobots.searchField,\r\n    robots: state.requestRobots.robots,\r\n    isPending: state.requestRobots.isPending,\r\n    error: state.requestRobots.error \r\n  }\r\n}\r\n\r\nconst mapDispatchtoProps = (dispatch) => {\r\n  return {\r\n\r\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\r\n    onRequestRobots: () => dispatch(requestRobots())\r\n  }\r\n  }\r\n\r\nclass App extends Component {\r\n\r\n    componentDidMount() {\r\n      this.props.onRequestRobots()\r\n      } \r\n\r\n  render() {\r\n    // const { robots } = this.state;\r\n    const {searchField, onSearchChange, robots, isPending} = this.props; \r\n    const filteredfriends = robots.filter(robots =>{\r\n      return robots.name.toLowerCase().includes(searchField.toLowerCase())\r\n    }) \r\n    if (isPending === 1) {\r\n      return <h1>Loading</h1>\r\n    } else {\r\n      return ( \r\n        <div className='tc'>\r\n          <h1 className = 'f1'>Co-workers </h1>\r\n          <Searchbox searchChange= {onSearchChange}/>\r\n          <Scroll>\r\n            <ErrorBoundry>\r\n              <Cardlist robots={filteredfriends} />\r\n            </ErrorBoundry>\r\n          </Scroll>\r\n        </div>\r\n    );\r\n  }\r\n}\r\n\r\n}\r\n\r\nexport default connect(mapStatetoProps, mapDispatchtoProps)(App); ","import { CHANGE_SEARCH_FIELD,\r\n REQUEST_ROBOTS_PENDING,\r\n REQUEST_ROBOTS_SUCCESS,\r\n REQUEST_ROBOTS_FAIL \r\n} from './constant'\r\n \r\nexport const setSearchField = (text) => ({\r\n\ttype: CHANGE_SEARCH_FIELD,\r\n\tpayload: text\r\n})\r\n\r\nexport const requestRobots = () => (dispatch) => {\r\n\tdispatch({type: REQUEST_ROBOTS_PENDING});\r\n\tfetch('https://jsonplaceholder.typicode.com/users')\r\n      .then(response => response.json())\r\n      .then(data => dispatch({type: REQUEST_ROBOTS_SUCCESS, payload: data\r\n      }))\r\n      .catch(error => dispatch({type: REQUEST_ROBOTS_FAIL, payload: error }))\r\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAIL = 'REQUEST_ROBOTS_FAIL';","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { CHANGE_SEARCH_FIELD,\r\n REQUEST_ROBOTS_PENDING,\r\n REQUEST_ROBOTS_SUCCESS,\r\n REQUEST_ROBOTS_FAIL \r\n} from './constant'\r\n\r\n\r\nconst initialStateSearch = {\r\n\tsearchField: ''\r\n\r\n}\r\n\r\nexport const searchRobots = (state=initialStateSearch, action={}) => {\r\n\tswitch(action.type){\r\n\t\tcase CHANGE_SEARCH_FIELD:\r\n\t\t\treturn  Object.assign({}, state, {searchField: action.payload})\r\n\t\tdefault: \r\n\t\t\treturn state;  \r\n\r\n\t}\r\n}\r\n\r\nconst initialStateRobots = {\r\n\tisPending: false,\r\n\trobots: [],\r\n\terror: ''\r\n}\r\n\r\nexport const requestRobots = (state = initialStateRobots, action={}) => {\r\n\tswitch(action.type) {\r\n\t\tcase REQUEST_ROBOTS_PENDING:\r\n\t\t\treturn Object.assign({}, state, {isPending: true})\r\n\t\tcase REQUEST_ROBOTS_SUCCESS:\r\n\t\t\treturn Object.assign({}, state, {robots: action.payload, isPending: false})\r\n\t\tcase REQUEST_ROBOTS_FAIL:\t\r\n\t\t\treturn Object.assign({}, state, {error: action.payload, isPending: false})\r\n\t\tdefault:\r\n\t\t\treturn state;\r\n\t\t}\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\n// import Card from './Card';\nimport App from './containers/App';\n// import {robots} from './robots';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';  \nimport { searchRobots, requestRobots } from './reducer';\n\n\nconst logger = createLogger();\n\nconst rootReducer = combineReducers({searchRobots, requestRobots})\nconst store = createStore(\n  rootReducer,\n  applyMiddleware(thunkMiddleware, logger)\n)\n\n\nReactDOM.render(\n\n\t<Provider store={store} >\n\t\t<App />\n\t</Provider>,\n\tdocument.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}